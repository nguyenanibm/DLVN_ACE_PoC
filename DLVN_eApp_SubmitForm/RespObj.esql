CREATE COMPUTE MODULE RespObj
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		CALL CopyEntireMessage();
		SET OutputRoot.Properties.*[] = Environment.Variables.Request.Properties.*[];
		CREATE NEXTSIBLING OF OutputRoot.Properties DOMAIN('HTTPReplyHeader');
		SET OutputRoot.HTTPReplyHeader."Content-Type" = 'application/json';
		SET OutputRoot.JSON = InputRoot.JSON;
		CALL ResetJSONArray(OutputRoot.JSON);
		
		DELETE FIELD Environment;
		RETURN TRUE;
	END;
	
	CREATE PROCEDURE ResetJSONArray( IN nodeRoot REFERENCE ) BEGIN
		DECLARE CHILDRUN REFERENCE TO nodeRoot;
		MOVE CHILDRUN FIRSTCHILD;
		WHILE LASTMOVE(CHILDRUN) DO
			DECLARE FN CHAR FIELDNAME(CHILDRUN);
			IF(FIELDNAME(CHILDRUN)='Item') THEN
				-- UPDATE PARENT TYPE
				DECLARE NPARENT REFERENCE TO CHILDRUN;
				MOVE NPARENT PARENT;
				SET NPARENT TYPE = JSON.Array;
				-- CONTINUE SCAN CHILDRENS
				DECLARE CHILDRUN2 REFERENCE TO CHILDRUN;
				MOVE CHILDRUN2 FIRSTCHILD;
				WHILE LASTMOVE(CHILDRUN2) DO
					CALL ResetJSONArray(CHILDRUN2);
					MOVE CHILDRUN2 NEXTSIBLING;
				END WHILE;
			ELSE
				CALL ResetJSONArray(CHILDRUN);
			END IF;
			MOVE CHILDRUN NEXTSIBLING;
		END WHILE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
