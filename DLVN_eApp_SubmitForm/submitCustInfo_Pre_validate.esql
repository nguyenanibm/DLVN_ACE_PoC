CREATE COMPUTE MODULE submitCustInfo_Pre_validate
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		IF FIELDVALUE(Environment.Variable.Request.JSON.Data.PotentialID) = '' THEN
			SET Environment.Variable.DBData.Action = 'PotentialCustomer';
		ELSE
			SET Environment.Variable.DBData.Action = 'UpdateCustomer';
		END IF;
		
		IF FIELDVALUE(Environment.Variable.Request.JSON.Data.Income) = '' THEN
			SET Environment.Variable.DBData.Income = '0';
		ELSE
			SET Environment.Variable.DBData.Income = FIELDVALUE(Environment.Variable.Request.JSON.Data.Income);
		END IF;
		
		IF FIELDVALUE(Environment.Variable.Request.JSON.Data.OtherIncome) = '' THEN
			SET Environment.Variable.DBData.OtherIncome = '0';
		ELSE
			SET Environment.Variable.DBData.OtherIncome = FIELDVALUE(Environment.Variable.Request.JSON.Data.OtherIncome);
		END IF;
		
		IF FIELDVALUE(Environment.Variable.Request.JSON.Data.IsTaxAmerican) = '' THEN
			SET Environment.Variable.DBData.IsTaxAmerican = 0;
		ELSE
			SET Environment.Variable.DBData.IsTaxAmerican = FIELDVALUE(Environment.Variable.Request.JSON.Data.IsTaxAmerican);
		END IF;
		
		IF FIELDVALUE(Environment.Variable.Request.JSON.Data.IsCompany) = '' THEN
			SET Environment.Variable.DBData.IsCompany = 0;
		ELSE
			SET Environment.Variable.DBData.IsCompany = FIELDVALUE(Environment.Variable.Request.JSON.Data.IsCompany);
		END IF;
		
		IF FIELDVALUE(Environment.Variable.Request.JSON.Data.IsPOAddress) = '' THEN
			SET Environment.Variable.DBData.IsPOAddress = 0;
		ELSE
			SET Environment.Variable.DBData.IsPOAddress = FIELDVALUE(Environment.Variable.Request.JSON.Data.IsPOAddress);
		END IF;
		
		IF FIELDVALUE(Environment.Variable.Request.JSON.Data.IsOtherAddress) = '' THEN
			SET Environment.Variable.DBData.IsOtherAddress = 0;
		ELSE
			SET Environment.Variable.DBData.IsOtherAddress = FIELDVALUE(Environment.Variable.Request.JSON.Data.IsOtherAddress);
		END IF;
		
		IF FIELDVALUE(Environment.Variable.Request.JSON.Data.IsLIS) = '' THEN
			SET Environment.Variable.DBData.IsLIS = 0;
		ELSE
			SET Environment.Variable.DBData.IsLIS = FIELDVALUE(Environment.Variable.Request.JSON.Data.IsLIS);
		END IF;
		
		IF (FIELDVALUE(Environment.Variable.Request.JSON.Data.isPOAddress) = 'true') AND (FIELDVALUE(Environment.Variable.Request.JSON.Data.isPOAddress) = '1') THEN
			CALL getCustomerPO(FIELDVALUE(Environment.Variable.Request.JSON.Data.ProposalID));
		END IF;
		
		IF FIELDVALUE(Environment.Variable.Request.JSON.Data.Project) = '' THEN
			SET Environment.Variable.Request.JSON.Data.Project = 'magp';
			SET OutputRoot.JSON.Data.Project = 'magp';
		END IF;
		
		IF FIELDVALUE(Environment.Variable.Request.JSON.Data.FullName) = '' THEN
			SET Environment.Variable.Request.JSON.Data.Result = 'false';
			SET Environment.Variable.Request.JSON.Data.errLog = 'EMPTY';
			SET Environment.Variable.RouteName = 'RETURN';
			PROPAGATE TO LABEL 'RETURN';
		END IF;
		
		CALL getProposalInfo(FIELDVALUE(Environment.Variable.Request.JSON.Data.ProposalID));
		IF FIELDVALUE(Environment.Variables.DBResults.ProposalInfo[1].Status) = 'Initial' THEN
			SET Environment.Variable.Request.JSON.Data.Result = 'false';
			SET Environment.Variable.Request.JSON.Data.errLog = 'EMPTY';
			SET Environment.Variable.RouteName = 'RETURN';
			PROPAGATE TO LABEL 'RETURN';
		END IF;
		
		CALL checkIDNumExists(Environment.Variable.Request.JSON.Data.IDNum);
		
		CALL eApp_spSaveAppForm(
			FIELDVALUE(Environment.Variable.DBData.Action),
			FIELDVALUE(Environment.Variable.Request.JSON.Data.ProposalID),
			FIELDVALUE(Environment.Variable.Request.JSON.Data.PotentialType),
			FIELDVALUE(Environment.Variable.Request.JSON.Data.Relationship),
			FIELDVALUE(Environment.Variable.Request.JSON.Data.FullName),
			FIELDVALUE(Environment.Variable.Request.JSON.Data.BirthDay),
			FIELDVALUE(Environment.Variable.Request.JSON.Data.BirthPlace),
			FIELDVALUE(Environment.Variable.Request.JSON.Data.Age),
			FIELDVALUE(Environment.Variable.Request.JSON.Data.Gender),
			FIELDVALUE(Environment.Variable.Request.JSON.Data.IDNum),
			FIELDVALUE(Environment.Variable.Request.JSON.Data.Nationality),
			FIELDVALUE(Environment.Variable.Request.JSON.Data.Maturity),
			FIELDVALUE(Environment.Variable.Request.JSON.Data.Occupation),
			FIELDVALUE(Environment.Variable.Request.JSON.Data.OccupationDetail),
			FIELDVALUE(Environment.Variable.Request.JSON.Data.OtherOcc),
			FIELDVALUE(Environment.Variable.DBData.Income),
			FIELDVALUE(Environment.Variable.DBData.IsTaxAmerican),
			FIELDVALUE(Environment.Variable.Request.JSON.Data.CellPhone),
			FIELDVALUE(Environment.Variable.Request.JSON.Data.HomePhone),
			FIELDVALUE(Environment.Variable.Request.JSON.Data.BusinessPhone),
			FIELDVALUE(Environment.Variable.Request.JSON.Data.Email),
			FIELDVALUE(Environment.Variable.Request.JSON.Data.Address),
			FIELDVALUE(Environment.Variable.Request.JSON.Data.AddressCode),
			FIELDVALUE(Environment.Variable.Request.JSON.Data.BusinessAddress),
			FIELDVALUE(Environment.Variable.Request.JSON.Data.BusinessAddressCode),
			FIELDVALUE(Environment.Variable.DBData.IsCompany),
			FIELDVALUE(Environment.Variable.Request.JSON.Data.BankAccount),
			FIELDVALUE(Environment.Variable.Request.JSON.Data.BankBranch),
			FIELDVALUE(Environment.Variable.Request.JSON.Data.OtherOccDetail),
			FIELDVALUE(Environment.Variable.Request.JSON.Data.TaxID),
			0,
			FIELDVALUE(Environment.Variable.Request.JSON.Data.ClassSchool),
			FIELDVALUE(Environment.Variable.Request.JSON.Data.School),
			FIELDVALUE(Environment.Variable.Request.JSON.Data.OtherIncome),
			FIELDVALUE(Environment.Variable.DBData.IsPOAddress),
			FIELDVALUE(Environment.Variable.DBData.IsOtherAddress),
			FIELDVALUE(Environment.Variable.Request.JSON.Data.IsSMS),
			FIELDVALUE(Environment.Variables.DBResults.cli_id),
			FIELDVALUE(Environment.Variable.Request.JSON.Data.OccupationCode),
			FIELDVALUE(Environment.Variable.Request.JSON.Data.OtherOccCode),
			0,
			FIELDVALUE(Environment.Variable.Request.JSON.Data.PotentialID),
			FIELDVALUE(Environment.Variable.DBData.IsLIS),
			'',
			FIELDVALUE(Environment.Variable.Request.JSON.Data.OccupationClassCurrent),
			FIELDVALUE(Environment.Variable.Request.JSON.Data.OtherOccupationClass),
			FIELDVALUE(Environment.Variable.Request.JSON.Data.PositionFreeText),
			Environment.Variables.DBResults.PotentialID
		);
		
		IF FIELDVALUE(Environment.Variables.DBResults.PotentialID) < 0 THEN
			SET Environment.Variable.Request.JSON.Data.Result = 'false';
			SET Environment.Variable.Request.JSON.Data.errLog = 'Customer not saved successful';
			SET Environment.Variable.RouteName = 'RETURN';
			PROPAGATE TO LABEL 'RETURN';
		END IF;
		
		CALL getCustomer(FIELDVALUE(Environment.Variable.Request.JSON.Data.ProposalID), FIELDVALUE(Environment.Variable.Request.JSON.Data.PotentialID));
		
		CALL getElseSamePOLI(FIELDVALUE(Environment.Variable.Request.JSON.Data.ProposalID), FIELDVALUE(Environment.Variable.Request.JSON.Data.PotentialID));
		
		IF FIELDVALUE(Environment.Variables.DBResults.CustomerPOLI[1].PotentialID) <> ''
			AND FIELDVALUE(Environment.Variables.DBResults.Customer[1].PotentialType) IN ('LI','PO') THEN
			CALL eApp_spSaveAppForm(
				FIELDVALUE(Environment.Variable.DBData.Action),
				FIELDVALUE(Environment.Variable.Request.JSON.Data.ProposalID),
				FIELDVALUE(Environment.Variable.Request.JSON.Data.PotentialType),
				FIELDVALUE(Environment.Variable.Request.JSON.Data.Relationship),
				FIELDVALUE(Environment.Variable.Request.JSON.Data.FullName),
				FIELDVALUE(Environment.Variable.Request.JSON.Data.BirthDay),
				FIELDVALUE(Environment.Variable.Request.JSON.Data.BirthPlace),
				FIELDVALUE(Environment.Variable.Request.JSON.Data.Age),
				FIELDVALUE(Environment.Variable.Request.JSON.Data.Gender),
				FIELDVALUE(Environment.Variable.Request.JSON.Data.IDNum),
				FIELDVALUE(Environment.Variable.Request.JSON.Data.Nationality),
				FIELDVALUE(Environment.Variable.Request.JSON.Data.Maturity),
				FIELDVALUE(Environment.Variable.Request.JSON.Data.Occupation),
				FIELDVALUE(Environment.Variable.Request.JSON.Data.OccupationDetail),
				FIELDVALUE(Environment.Variable.Request.JSON.Data.OtherOcc),
				FIELDVALUE(Environment.Variable.DBData.Income),
				FIELDVALUE(Environment.Variable.DBData.IsTaxAmerican),
				FIELDVALUE(Environment.Variable.Request.JSON.Data.CellPhone),
				FIELDVALUE(Environment.Variable.Request.JSON.Data.HomePhone),
				FIELDVALUE(Environment.Variable.Request.JSON.Data.BusinessPhone),
				FIELDVALUE(Environment.Variable.Request.JSON.Data.Email),
				FIELDVALUE(Environment.Variable.Request.JSON.Data.Address),
				FIELDVALUE(Environment.Variable.Request.JSON.Data.AddressCode),
				FIELDVALUE(Environment.Variable.Request.JSON.Data.BusinessAddress),
				FIELDVALUE(Environment.Variable.Request.JSON.Data.BusinessAddressCode),
				FIELDVALUE(Environment.Variable.DBData.IsCompany),
				FIELDVALUE(Environment.Variable.Request.JSON.Data.BankAccount),
				FIELDVALUE(Environment.Variable.Request.JSON.Data.BankBranch),
				FIELDVALUE(Environment.Variable.Request.JSON.Data.OtherOccDetail),
				FIELDVALUE(Environment.Variable.Request.JSON.Data.TaxID),
				0,
				FIELDVALUE(Environment.Variable.Request.JSON.Data.ClassSchool),
				FIELDVALUE(Environment.Variable.Request.JSON.Data.School),
				FIELDVALUE(Environment.Variable.Request.JSON.Data.OtherIncome),
				FIELDVALUE(Environment.Variable.DBData.IsPOAddress),
				FIELDVALUE(Environment.Variable.DBData.IsOtherAddress),
				FIELDVALUE(Environment.Variable.Request.JSON.Data.IsSMS),
				FIELDVALUE(Environment.Variables.DBResults.cli_id),
				FIELDVALUE(Environment.Variable.Request.JSON.Data.OccupationCode),
				FIELDVALUE(Environment.Variable.Request.JSON.Data.OtherOccCode),
				0,
				FIELDVALUE(Environment.Variables.DBResults.CustomerPOLI[1].PotentialID),
				FIELDVALUE(Environment.Variable.DBData.IsLIS),
				'',
				FIELDVALUE(Environment.Variable.Request.JSON.Data.OccupationClassCurrent),
				FIELDVALUE(Environment.Variable.Request.JSON.Data.OtherOccupationClass),
				FIELDVALUE(Environment.Variable.Request.JSON.Data.PositionFreeText),
				Environment.Variables.DBResults.PotentialID
			);
		END IF;
		
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
